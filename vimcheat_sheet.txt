"##############################################################################################################################
https://qiita.com/hide/items/5bfe5b322872c61a6896#%E3%82%B3%E3%83%94%E3%83%BC%E3%83%9A%E3%83%BC%E3%82%B9%E3%83%88
ZZ 	上書き保存し、viを終了
0 	行頭
＾ 	行頭
$ 	行末
% 	対応する括弧に移動
gg	1行目に移動
G	最終行に移動

H 	画面上の最初の行 (Home)
M 	画面上の中央の行 (Middle)
L 	画面上の最後の行 (Last)


"##############################################################################################################################
削除	x
コピー	y
カット	d
ペースト	p , P
行の連結	shift + j
"##############################################################################################################################
インデント	>>
インデント除去	<<

"##############################################################################################################################

" フォントの大きさの変更
" : コマンドモードに入る
set guifont=*

"##############################################################################################################################
" 置換
" esc を押してから、:を押す。
" % はファイル全体を置換する
" 1,100 は1～１００行目を置換する
" v でビジュアルモードで選択してからだと、選択範囲内を置換する（ビジュアルモードの場合、:% を入力する必要はない）
:%s/"置換前"/"置換後"/g
:1,100s/"置換前"/"置換後"/g

:%s/"置換前"/"置換後"/gc # gc だと逐一確認するらしい
:%s/"置換前"/"置換後"/e  # e フラグはパターンが見つからなくてもエラーを発生させないらしい

"##############################################################################################################################
" コマンドモード（検索・置換など）で、コピーした語をペーストしたい
" https://qiita.com/fukajun/items/22e05c194866bf6aab6c
/ してから、ctrl+r する。そして、* , または0から9を打ってエンター（クリップボードにある語が/の後ろにペーストされる。）
/ した時点で、クリップボードにある語をセットして欲しいもんだが。
↑ :e や :sh :%s などでも、ペースト出来る。
レジスターの中身は、  :registers で確認できる。

"##############################################################################################################################
"マーク機能
"https://motamemo.com/vim/vim-tips/move-mark/
"https://utano.jp/entry/2018/08/multiple-line-delete-at-vim/
"ノーマルモードで以下を入力（:を打ってコマンドモードに入る必要は無い）

" マークの設定（個々のバッファにローカルなマークを設定)
m[a-z]
" マークの設定（個グローバルにアクセス可能なマークを設定)
m[A-Z]

"マークへ移動（設定された行の最初の非空白文字に移動）
'[a-z]


"マークへ移動（マークが設定された場所に移動）
`[a-z]

"マークの一覧
:marks

Vimが自動的に設定してくれるマークは以下のとおりです。
キー	バッファの内容
''	現在のファイルで直前に行われたジャンプ以前にいた場所
'.	直前に変更された場所
'^	直前に挿入があった場所
'[	直前に変更もしくはヤンクが行われた先頭
']	直前に変更もしくはヤンクが行われた末尾
'<	直前のビジュアルな選択範囲の先頭
'>	直前のビジュアルな選択範囲の末尾

"##############################################################################################################################
" ファイルを開く
:e
" タブを叩き続けると、ファイルの候補を出してくれる。（エンターを押すと、その時点の名称で開こうとするので注意）
" ディレクトリの中に入りたい場合、\を押す。そうするとそのディレクトリの中のファイルが列挙される。
" （エンターを押してディレクトリに入ろうとすると、ディレクトリを開くことになりエラーとなる）
" 上下矢印で、開いたファイルの履歴をたどれる。
" ファイルエクスプローラーで開く。ただし、ドライブのルートに行けない、他のドライブに行けない。
:e .
" :e C:\\  このようにやってもファイルエクスプローラーにならない。

:enew
	空のウィンドウ（バッファ）を開く（タブにはならない）:ls するとリストに現れる。:b数字 で移動できる
:tabnew
	空のタブを開く。:tabn  , :tabp でタブを移動する。  :ls するとリストに現れる。:b数字 を押すとカレントタブに指定したバッファが表示される
	（そのタブに移動するわけでない。なので、複数タブに同一のバッファが表示されることがある。）
https://doruby.jp/users/aisi/entries/Vim__
"##############################################################################################################################
" UNDO
u
" REDO
ctrl + r
" 但し、1文字ずつの REDO でなく、一連の処理の REDO であり、その一連の処理の切れ目はモードの切り替え？
"##############################################################################################################################
" カーソル移動
https://qiita.com/takeharu/items/9d1c3577f8868f7b07b5
https://eng-entrance.com/linux-vi-move
hjkl
w 単語単位で次の単語に移動
W 上記の空白だけを考慮する版
b 単語単位で前の単語に移動
B 上記の空白だけを考慮する版
% 対応する括弧へ移動

e 単語の終わりに移動
ge 前の単語の終わりに移動

{ 段落単位の移動
} 段落単位の移動

" http://labs.timedia.co.jp/2014/09/learn-about-vim-in-the-workplace.html
元いた場所に戻る: <C-o>
元いた場所に進む: <C-i>
"##############################################################################################################################
" https://qiita.com/colorrabbit/items/755cfbb0e97d48280775
" http://php-web.net/vim/text.html
" 行、単語の選択
" ビジュアルモード
" esc を押してから、vを押してから、ijkl , ctrl+f , ctrl+b など
" 
" v
"     文字単位で範囲指定します。
" V
"     行単位で範囲指定します。
" ctrl-v
"     矩形(長方形)で範囲指定します。 
" h , j , k , l
"	カーソルの位置文字ずつの移動
" w , W
"	単語単位で移動

"##############################################################################################################################
レジスターの一覧
:registers

# 1番レジスターの中身をペーストする。
"1p
"1P

"##############################################################################################################################
" シェルコマンドを実行する
" http://nanasi.jp/articles/code/io/file-path.html
:!
:!notepad %

" VimからWindowsのExplorerを起動する方法
" http://yoshiyoshifujii.hatenablog.com/entry/2014/08/13/084708
" https://maku77.github.io/vim/file/explore.html
" silent を入れないと、コマンドプロンプトの画面が残る。
:silent ! start .
" windows で関連付けたアプリケーションで実行する。
:silent ! start %

" 開いているファイルの名称をクリップボードにコピーする。ただし、各種特殊文字は\マークでエスケープされる。
" % でなくて、%:p かも。
:silent ! echo "%"| clip
:silent ! echo "%:p"| clip
:expand('%:p')

" 開いているファイルの履歴を作る
:silent ! C:/bin/make_history.cmd "%"

"##############################################################################################################################
" シェルに一時的に戻る
:sh
" 一時的に戻ったシェルからvimに戻る
exit

"##############################################################################################################################
" バッファの一覧
:ls 
" バッファ（≒見えないタブ）を切り替える  set hidden しておく。しておかないと、バッファを切り変える度に、保存を求められる。
:b 数字
:bn
:bp
:b タブで補完
" バッファを消す
:bd
:bd!

" 複数バッファをタブにする
" https://qiita.com/kuwa72/items/deef2703af74d2d993ee
" 下記のどちらか
:bufdo tab split
:tab ba

" タブの操作、左、右、閉じる（タイプ数が多いので、:ls :b の方がよさそう）
:tabn
:tabp
:tabc

"##############################################################################################################################
" https://qiita.com/nobuyuki-ishii/items/fa7e4e7aef14e783aa7f
ctrl + n　ファイル後方に向けて補完候補を探す
ctrl + p　ファイル先頭に向けて補完候補を探す


"##############################################################################################################################
" 開いているファイルの文字コードを変える
" https://linux-suomi.net/modules/poco/index.php?content_id=19
" 開くときに文字コードを指定する方法があるらしいが、まだ省略
:e ++enc=sjis
:e ++enc=cp932
:e ++enc=utf8

" https://qiita.com/bezeklik/items/2c9925f9c07762559471
" sjis で保存
:se fenc=cp932

" vi の文字コード
:se enc?

" 開いているファイルの文字コード
:se fenc?

"##############################################################################################################################
" 折り返し
" http://kaworu.jpn.org/kaworu/2007-11-10-1.php
" vimでファイルを編集していたら、行が長すぎて、ターミナルの幅に収まらなくなってしまったときに、なぜか、折り返してくれなくなってしまった。
" そういうときには、wrapの設定が無効になっているので、
:set wrap

" とコマンドを実行してあげると、画面の端で、行を折り返して表示してくれるようになります。
" 行の折り返し表示をやめるときは、
:set nowrap

"##############################################################################################################################
"大文字小文字変換
"http://nekoyukimmm.hatenablog.com/entry/2015/04/14/144658
" ビジュアルモードで
u
U
"##############################################################################################################################
"vimで現在開いているファイルのコピー,リネーム,削除をする
"https://qiita.com/sfuta/items/93fe58e6a7953413a815


"##############################################################################################################################
" grep リファレンス
grep 検索正規表現 ファイル名

" https://eng-entrance.com/linux-command-grep
" https://qiita.com/yuku/items/fe4a7f4de6242e958553
" オプション　-i
" 大文字と小文字を区別せず検索する
"
" オプション　-E
" 拡張正規表現で検索を行う
"
" オプション-e
" 一致処理に指定した正規表現を使う
"
" オプション-v
" 一致しないものを検索する
"
" オプション-n
" 検索結果に行番号を表示する
"
" オプション-l
" 検索結果にファイル名のみ表示する
"
" オプション-h
" 検索結果にファイル名を表示しない
"
" オプション-o
" 検索結果に一致した文字を表示する
"
" オプション-C
" 検索結果に一致した箇所から前後に指定した行数表示する
"
" オプション-r
" ディレクトリ内も検索対象とする
"
" オプション-L
" 検索した結果、該当しなったファイルを表示する

" オプション-n
" 行番号を表示する
" エイリアスにすれば、常に行番号を表示できる
" alias grep="grep -n --color=auto "
" 行番号だけを表示する場合、sedで編集する
grep -e "DELETE" -n querylog.txt | sed -e 's/:.*//g'
